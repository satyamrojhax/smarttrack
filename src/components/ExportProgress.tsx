
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Download, FileText, Share2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';

interface StudyStats {
  total_study_time: number;
  total_sessions: number;
  notes_created: number;
  chapters_completed: number;
  study_streak: number;
}

const ExportProgress: React.FC = () => {
  const [stats, setStats] = useState<StudyStats | null>(null);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const { user } = useAuth();

  useEffect(() => {
    if (user) {
      fetchStudyStats();
    }
  }, [user]);

  const fetchStudyStats = async () => {
    if (!user) return;

    try {
      const { data, error } = await supabase
        .from('study_statistics')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('Error fetching study stats:', error);
      } else {
        setStats(data || {
          total_study_time: 0,
          total_sessions: 0,
          notes_created: 0,
          chapters_completed: 0,
          study_streak: 0
        });
      }
    } catch (error) {
      console.error('Error fetching study stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };

  const generateReport = () => {
    if (!stats) return;

    const reportContent = `
STUDY PROGRESS REPORT
Generated on: ${new Date().toLocaleDateString()}

📊 STUDY STATISTICS
─────────────────────
• Total Study Time: ${formatTime(stats.total_study_time)}
• Study Sessions: ${stats.total_sessions}
• Current Streak: ${stats.study_streak} days
• Notes Created: ${stats.notes_created}
• Chapters Completed: ${stats.chapters_completed}

🎯 ACHIEVEMENTS
─────────────────
${stats.total_sessions >= 1 ? '✓ First Steps - Completed first study session' : '• First Steps - Complete your first study session'}
${stats.total_sessions >= 50 ? '✓ Dedicated Student - Completed 50 study sessions' : '• Dedicated Student - Complete 50 study sessions'}
${stats.total_study_time >= 36000 ? '✓ Time Master - Studied for 10+ hours' : '• Time Master - Study for 10+ hours'}
${stats.notes_created >= 10 ? '✓ Note Taker - Created 10+ notes' : '• Note Taker - Create 10+ notes'}

📈 PROGRESS SUMMARY
─────────────────────
You're doing great! Keep up the consistent study habits.
${stats.study_streak > 0 ? `Your current ${stats.study_streak}-day streak shows dedication!` : 'Start a study streak by studying daily!'}

Generated by Smart Track
    `;

    return reportContent;
  };

  const exportAsText = () => {
    const content = generateReport();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `study-progress-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "Your study progress report has been downloaded!"
    });
  };

  const shareProgress = async () => {
    if (!stats) return;

    const shareText = `🎓 My Study Progress:
📚 ${stats.total_sessions} study sessions completed
⏰ ${formatTime(stats.total_study_time)} total study time
🔥 ${stats.study_streak} day streak
📝 ${stats.notes_created} notes created

Keep learning with Smart Track!`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Study Progress',
          text: shareText
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(shareText);
        toast({
          title: "Copied to Clipboard",
          description: "Your progress summary has been copied!"
        });
      } catch (error) {
        console.error('Error copying to clipboard:', error);
      }
    }
  };

  if (loading) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardContent className="p-6">
          <div className="text-center">Loading study statistics...</div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="w-5 h-5" />
          Export Progress
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {stats && (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">{formatTime(stats.total_study_time)}</div>
                <div className="text-sm text-muted-foreground">Total Study Time</div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">{stats.total_sessions}</div>
                <div className="text-sm text-muted-foreground">Study Sessions</div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">{stats.study_streak}</div>
                <div className="text-sm text-muted-foreground">Day Streak</div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">{stats.notes_created}</div>
                <div className="text-sm text-muted-foreground">Notes Created</div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-red-600">{stats.chapters_completed}</div>
                <div className="text-sm text-muted-foreground">Chapters Done</div>
              </CardContent>
            </Card>
          </div>
        )}

        <div className="flex gap-4 justify-center">
          <Button onClick={exportAsText} className="gap-2">
            <FileText className="w-4 h-4" />
            Download Report
          </Button>
          
          <Button onClick={shareProgress} variant="outline" className="gap-2">
            <Share2 className="w-4 h-4" />
            Share Progress
          </Button>
        </div>

        <div className="text-center">
          <p className="text-sm text-muted-foreground">
            Export your study progress as a detailed report or share your achievements with friends!
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default ExportProgress;
